// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  Active
  Banned
}

enum UserRole {
  Customer
  Admin
}

enum CategoryStatus {
  Active
  Inactive
}

enum ProductStatus {
  Active
  Inactive
}

enum OrderStatus {
  Pending // รอจ่าย
  Paid // จ่ายแล้ว
  Shipped // กำลังส่ง
  Delivered // ส่งเสร็จแล้ว
  Cancelled // ยกเลิก
}

model User {
  id        String     @id @default(uuid())
  name      String?
  email     String     @unique
  password  String
  status    UserStatus @default(Active)
  role      UserRole   @default(Customer)
  pictureId String?
  picture   String?
  address   String?
  tel       String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cart      Cart[]
  orders    Order[]
}

model Category {
  id        String         @id @default(uuid())
  name      String
  status    CategoryStatus @default(Active)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  products  Product[]
}

model Product {
  id          String        @id @default(uuid())
  title       String
  description String
  cost        Float         @default(0)
  basePrice   Float
  price       Float
  sold        Int           @default(0)
  stock       Int
  status      ProductStatus @default(Active)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  categoryId String
  category   Category       @relation(fields: [categoryId], references: [id])
  images     ProductImage[]
  cartItems  CartItem[]
  orderItems OrderItem[]
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  fileId    String
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  product   Product @relation(fields: [productId], references: [id])
}

//  ตะกร้า
model Cart {
  id        String   @id @default(uuid())
  cardTotal Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderedById String
  orderedBy   User       @relation(fields: [orderedById], references: [id])
  cartItems   CartItem[]
}

// ของในตะกร้า
model CartItem {
  id    String @id @default(uuid())
  count Int    @default(1)
  price Float

  cartId String
  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade) // Cascade เป็นการเชื่อม action เมื่อ onDelete Cascade เมื่อ cart โดนลบ CartItem ก็โดนลบ

  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id             String      @id @default(uuid())
  orderNumber    String
  totalAmount    Float
  status         OrderStatus @default(Pending)
  paymentImage   String?
  paymentAt      DateTime?
  address        String?
  phone          String?
  note           String?
  shippingFee    Float       @default(0)
  trackingNumber String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  customerId String
  customer   User        @relation(fields: [customerId], references: [id])
  items      OrderItem[]
}

model OrderItem {
  id           String   @id @default(uuid())
  quantity     Int
  price        Float
  totalPrice   Float
  productTitle String
  productImage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
}
